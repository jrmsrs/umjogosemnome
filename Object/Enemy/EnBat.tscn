[gd_scene load_steps=17 format=2]

[ext_resource path="res://Object/Entity/Object.tscn" type="PackedScene" id=1]
[ext_resource path="res://assets/enbat.png" type="Texture" id=2]
[ext_resource path="res://Object/Helpers/Hitbox.tscn" type="PackedScene" id=3]
[ext_resource path="res://Object/Helpers/Hurtbox.tscn" type="PackedScene" id=4]

[sub_resource type="GDScript" id=3]
script/source = "extends \"res://Object/Entity/Object.tscn::16\"

onready var origin_pos = position
#onready var player = get_parent().get_parent().get_node(\"Player\")

const CRYSTAL := preload(\"res://Object/Item/ItCrystal.tscn\")
const CARROT := preload(\"res://Object/Item/ItCarrot.tscn\")

export var life_max: float = 2
var life: float = life_max
var knockback: int = 0

var path = []
var threshold: int = 8
var nav = null
var chase: bool = false

var hitting: bool = false
var target
var dodging: bool = false

func _ready():
	$SpriteSheet.material = $SpriteSheet.material.duplicate()
	yield(owner, \"ready\")
	nav = owner.nav 

func _physics_process(delta):
#	if !hitting: 
	target = Global.player.position
	if dodging && $DodgingTimer.is_stopped(): $DodgingTimer.start()
	match current_state:
		Consts.IDLE:
			_idle_state()
		Consts.CHASE:
			_chase_state()
		Consts.HURT:
			_hurt_state()
	_handle_life()

func _idle_state():
	current_state = Consts.CHASE

func _chase_state():
	Animation.play(\"run\")
	if velocity==Vector2.ZERO:
		Animation.play(\"idle\")
	else:
		Animation.play(\"run\")
	if $Hitbox/CollisionShape2D.scale < Vector2(1,1):
		$Hitbox/CollisionShape2D.scale += Vector2(.005,.005)
		
	if Global.reload_enemy:
		chase=false
		position = origin_pos
		path = []
	
	if Global.player:
		chase = position.distance_to(target) < 400
	
	$SpriteSheet.flip_h = velocity.x<0
	if path.size() > 0:
		move_to_target()
	if path.size() > 0:
		if position.distance_to(path[path.size() -1]) > 600 || position.distance_to(path[0]) < 30:
			if $Timer.time_left==0:
				$Timer.start()
		else:
			$Timer.stop()
	if knockback:
		current_state = Consts.HURT

func _hurt_state():
	Animation.play(\"hurt\")
	velocity = Vector2.ZERO

func move_to_target():
	if global_position.distance_to(path[0]) < threshold:
		path.remove(0)
	else:
		var direction = global_position.direction_to(path[0])
		if !hitting && !dodging:
			velocity = direction * run_speed if position.distance_to(target) < 100 else direction * (run_speed * 1.5)
		else:
			velocity = -direction * run_speed if position.distance_to(target) < 100 else -direction * (run_speed * 1.5)
		velocity = move_and_slide(velocity)

func get_target_path(target_pos):
	if chase:
		path = nav.get_simple_path(global_position, target_pos, false)

func _handle_life():
	if life<=0:
		_handle_drop(25,20)
		queue_free()
func _handle_drop(crystal_rate, carrot_rate):
	if randi()%100 <= crystal_rate:
		var crystal_inst = CRYSTAL.instance()
		get_parent().add_child(crystal_inst)
		crystal_inst.position = Vector2(position.x,position.y-5*pscale)
	if randi()%100 <= carrot_rate:
		var carrot_inst = CARROT.instance()
		carrot_inst.current_state = Consts.ACTIVE
		carrot_inst.scale = Vector2(.75,.75)
		carrot_inst.velocity.x = randi()%800-400
		get_parent().add_child(carrot_inst)
		carrot_inst.position = Vector2(position.x,position.y-5*pscale)

func _on_Timer_timeout():
	chase=false
	position = origin_pos
	velocity=Vector2.ZERO
	path = []

func _on_Hitbox_area_entered(area):
	$Hitbox/CollisionShape2D.scale = Vector2(.01,.01)
	var body = area.get_parent()
	if body==Global.player:
		if body.vunerable: 
			Global.player_life -= 1 #body.life -= 1 
			body.knockback = 300*sign(body.position.x - position.x) if sign(body.position.x - position.x) else 300
			body.vunerable = false
		hitting = true
		dodging = true

func _on_Hitbox_area_exited(area):
	var body = area.get_parent()
	if body==Global.player:
		hitting = false
		
func _on_Hurtbox_area_entered(area):
	var body = area.get_parent()
	if area.is_in_group(\"PlayerSword\"):
		life -= 1
		knockback = 900*sign(position.x - body.position.x) if sign(position.x - body.position.x) else 900
	if area.is_in_group(\"PlayerCarrot\"):
		life -= 1
		knockback = 900*sign(position.x - body.position.x) if sign(position.x - body.position.x) else 900

func _on_AnimationPlayer_animation_finished(anim_name):
	if current_state == Consts.HURT:
		current_state = Consts.IDLE
		knockback = 0

func _on_DodgingTimer_timeout():
	dodging = false
"

[sub_resource type="Shader" id=11]
code = "shader_type canvas_item;

render_mode blend_mix;
uniform vec4 modulate: hint_color;

void fragment() {
	COLOR = vec4(modulate.rgb, texture(TEXTURE, UV).a * modulate.a);
}
"

[sub_resource type="ShaderMaterial" id=12]
shader = SubResource( 11 )
shader_param/modulate = Color( 0, 0, 0, 1 )

[sub_resource type="Animation" id=7]
length = 0.001
tracks/0/type = "value"
tracks/0/path = NodePath("SpriteSheet:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ 1 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("SpriteSheet:position")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Vector2( 0, 0 ) ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("SpriteSheet:scale")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Vector2( 8, -8 ) ]
}
tracks/3/type = "value"
tracks/3/path = NodePath("SpriteSheet:material:shader_param/modulate")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Color( 0, 0, 0, 1 ) ]
}
tracks/4/type = "value"
tracks/4/path = NodePath("SpriteSheet:material:shader")
tracks/4/interp = 1
tracks/4/loop_wrap = true
tracks/4/imported = false
tracks/4/enabled = true
tracks/4/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ SubResource( 11 ) ]
}
tracks/5/type = "value"
tracks/5/path = NodePath("SpriteSheet:material")
tracks/5/interp = 1
tracks/5/loop_wrap = true
tracks/5/imported = false
tracks/5/enabled = true
tracks/5/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ SubResource( 12 ) ]
}
tracks/6/type = "value"
tracks/6/path = NodePath("SpriteSheet:material:shader_param/amount")
tracks/6/interp = 1
tracks/6/loop_wrap = true
tracks/6/imported = false
tracks/6/enabled = true
tracks/6/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ 0.0 ]
}

[sub_resource type="Animation" id=10]
resource_name = "hurt"
length = 0.25
step = 0.15
tracks/0/type = "value"
tracks/0/path = NodePath("SpriteSheet:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ 2 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("SpriteSheet:scale")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Vector2( 8, 8 ) ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("SpriteSheet:position")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Vector2( 0, -64 ) ]
}
tracks/3/type = "value"
tracks/3/path = NodePath("SpriteSheet:material:shader_param/modulate")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/keys = {
"times": PoolRealArray( 0, 0.15 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 2,
"values": [ Color( 1, 1, 1, 1 ), Color( 0, 0, 0, 1 ) ]
}
tracks/4/type = "value"
tracks/4/path = NodePath("SpriteSheet:material:shader")
tracks/4/interp = 1
tracks/4/loop_wrap = true
tracks/4/imported = false
tracks/4/enabled = true
tracks/4/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ SubResource( 11 ) ]
}

[sub_resource type="Shader" id=15]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform float amount = 20.0;

void fragment() {
	vec2 uv = UV * 0.05;
	float a = fract(sin(dot(UV, vec2(12.9898, 78.233))) * 438.5453);
	vec4 col = texture(TEXTURE, UV);

	col.a *= pow(a, amount);

	COLOR = col;
}
"

[sub_resource type="Animation" id=16]
resource_name = "hurt (copy)"
length = 0.9
step = 0.15
tracks/0/type = "value"
tracks/0/path = NodePath("SpriteSheet:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ 2 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("SpriteSheet:scale")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Vector2( 8, 8 ) ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("SpriteSheet:position")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Vector2( 0, -64 ) ]
}
tracks/3/type = "value"
tracks/3/path = NodePath("SpriteSheet:material:shader")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/keys = {
"times": PoolRealArray( 0, 1.05 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ SubResource( 15 ), SubResource( 11 ) ]
}
tracks/4/type = "value"
tracks/4/path = NodePath("SpriteSheet:material:shader_param/amount")
tracks/4/interp = 1
tracks/4/loop_wrap = true
tracks/4/imported = false
tracks/4/enabled = true
tracks/4/keys = {
"times": PoolRealArray( 0, 0.45, 0.6, 0.75, 0.9 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1 ),
"update": 0,
"values": [ 0.0, 1.5, 2.5, 20.0, 2000.0 ]
}

[sub_resource type="Animation" id=8]
resource_name = "idle"
length = 0.1
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath("SpriteSheet:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ 1 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("SpriteSheet:position")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Vector2( 0, 0 ) ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("SpriteSheet:scale")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Vector2( 8, -8 ) ]
}

[sub_resource type="Animation" id=9]
resource_name = "run"
length = 0.6
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath("SpriteSheet:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.4 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ 0, 1 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("SpriteSheet:scale")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Vector2( 8, 8 ) ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("SpriteSheet:position")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Vector2( 0, -64 ) ]
}
tracks/3/type = "value"
tracks/3/path = NodePath("SpriteSheet:material:shader")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ SubResource( 11 ) ]
}

[sub_resource type="CapsuleShape2D" id=4]
radius = 16.0
height = 0.0

[sub_resource type="RectangleShape2D" id=5]
extents = Vector2( 24, 28 )

[sub_resource type="RectangleShape2D" id=6]
extents = Vector2( 24, 28 )

[node name="EnBat" groups=["Enemy"] instance=ExtResource( 1 )]
collision_layer = 128
collision_mask = 128
script = SubResource( 3 )
has_gravity = false
run_speed = 250

[node name="SpriteSheet" parent="." index="0"]
material = SubResource( 12 )
scale = Vector2( 8, -8 )
texture = ExtResource( 2 )
hframes = 3
vframes = 1
frame = 1

[node name="AnimationPlayer" parent="." index="1"]
autoplay = "idle"
anims/RESET = SubResource( 7 )
anims/hurt = SubResource( 10 )
"anims/hurt (copy)" = SubResource( 16 )
anims/idle = SubResource( 8 )
anims/run = SubResource( 9 )

[node name="CollisionShape2D" parent="." index="2"]
visible = false
position = Vector2( 0, -24 )
shape = SubResource( 4 )

[node name="Timer" type="Timer" parent="." index="4"]
wait_time = 4.0

[node name="Hitbox" parent="." index="5" groups=["Enemy"] instance=ExtResource( 3 )]
visible = false

[node name="CollisionShape2D" parent="Hitbox" index="0"]
position = Vector2( 0, -28 )
shape = SubResource( 5 )

[node name="Hurtbox" parent="." index="6" groups=["Enemy"] instance=ExtResource( 4 )]
visible = false
collision_layer = 32
monitorable = true

[node name="CollisionShape2D" parent="Hurtbox" index="0"]
position = Vector2( 0, -28 )
shape = SubResource( 6 )

[node name="DodgingTimer" type="Timer" parent="." index="8"]
wait_time = 0.4
one_shot = true

[connection signal="animation_finished" from="AnimationPlayer" to="." method="_on_AnimationPlayer_animation_finished"]
[connection signal="timeout" from="Timer" to="." method="_on_Timer_timeout"]
[connection signal="area_entered" from="Hitbox" to="." method="_on_Hitbox_area_entered"]
[connection signal="area_exited" from="Hitbox" to="." method="_on_Hitbox_area_exited"]
[connection signal="area_entered" from="Hurtbox" to="." method="_on_Hurtbox_area_entered"]
[connection signal="timeout" from="DodgingTimer" to="." method="_on_DodgingTimer_timeout"]

[editable path="Hitbox"]
[editable path="Hurtbox"]
